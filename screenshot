#!/bin/sh

# DESCRIPTION:
# * make and save a screenshot
# * [optionally] copy to clipboard
# * [optionally] optimize it
# * [optionally] OCR it
#
# ARGUMENTS:
# * mode: full|selected|focused
#
# ENVIRONMENT VARIABLES:
# * SCREENSHOT_DOCKER_HOST: set to prefer using docker for image optimization
#     Examples: `unix:///var/run/docker.sock` for local execution
#               `ssh://root@your.server.com` for remote
#
# DEPENDENCIES:
# * Interpreter: POSIX shell + coreutils
# * Screenshot tool:
#   * menyoki  + xdotool + (hacksaw | xrectsel | slop)
#   * shotgun  + xdotool + (hacksaw | xrectsel | slop)
#   * maim     + xdotool
#   * escrotum + xdotool
#   * mss      + xdotool + (hacksaw | xrectsel | slop)
#   * scrot
#   * (graphicsmagick | imagemagick) + xdotool
# * Clipboard tool [opt]: xclip | xsel
# * Image lossless optimizer [opt]: oxipng | ect | leanify | pngout | optipng | pngcrush | advpng | jpegoptim | jpegtran
# * OCR tool [opt]: tesseract + tesseract-ocr-rus | easyocr
# * Locks manager [opt]: flock
#


set -o errexit  # exit on fail
set -o nounset  # exit on undeclared variable
# set -o xtrace   # trace execution


SCREENSHOT_DIR=${SCREENSHOT_DIR:-${HOME}/screenshots}
save_date=$(date '+%s_%Y.%m.%d_%H:%M:%S')
SCREENSHOT_NAME=${SCREENSHOT_NAME:-${save_date}.png}
SCREENSHOT_PATH=${SCREENSHOT_PATH:-${SCREENSHOT_DIR}/${SCREENSHOT_NAME}}
SCREENSHOT_OCR_LANGS=${SCREENSHOT_OCR_LANGS:-eng+rus}

# We expect word splitting here
# shellcheck disable=2046
get_size() { set -- $(ls -dn "$1") && printf %s "$5"; }
has() { command -v "$@" >/dev/null; }
has_focus_window_getter() { has xdotool || has xprop sed; }
has_selection_getter() { has hacksaw || has xrectsel || has slop; }
was_optimized() { printf "%s\n" "${SCREENSHOT_NAME}" >> "${SCREENSHOT_DIR}/.optimized"; }

get_focused_window() {
    if has xdotool; then
        xdotool getwindowfocus -f
    elif has xprop sed; then
        printf '%d\n' "$(xprop -root 32x '\t$0' _NET_ACTIVE_WINDOW | cut -f 2)"
    else
        printf "Internal error!\n" >&2
        exit 1
    fi
}

usage() {
    printf "\
Usage: screenshot COMMAND
DESCRIPTION
    Make a screenshot.
COMMANDS:
full
        Make a full screen screenshot.
select
        Select a screenshot area with a mouse.
focused
        Make a screenshot of the currently focused window.
" >&2
}

check_user_input() {
    if [ $# -ne 1 ] || ! {
        [ "$1" = "full" ] ||
        [ "$1" = "select" ] ||
        [ "$1" = "focused" ];
    }
    then
        usage
        exit 1
    fi
}


# https://wiki.archlinux.org/title/Screen_capture#Dedicated_software
make_screenshot() {
    if has_selection_getter && has menyoki; then
        selection=$(
            if has hacksaw; then
                hacksaw
            elif has xrectsel; then
                xrectsel
            else
                slop
            fi
        )
        case $1 in
        'full'   ) menyoki -q capture --root                       png save -- "${SCREENSHOT_PATH}" ;;
        'select' ) menyoki -q capture --root --size "${selection}" png save -- "${SCREENSHOT_PATH}" ;;
        'focused') menyoki -q capture --focus                      png save -- "${SCREENSHOT_PATH}" ;;
        esac

    elif has_focus_window_getter && has_selection_getter && has shotgun; then
        selection=$(
            if has hacksaw; then
                hacksaw  -f "--id %i --geometry %g"
            elif has xrectsel; then
                xrectsel -f "        --geometry %wx%h+%x+%y"
            else
                slop     -f "--id %i --geometry %g"
            fi
        )
        # shellcheck disable=SC2086
        case $1 in
        'full'   ) shotgun                              -- "${SCREENSHOT_PATH}" ;;
        'select' ) shotgun ${selection}                 -- "${SCREENSHOT_PATH}" ;;
        'focused') shotgun --id "$(get_focused_window)" -- "${SCREENSHOT_PATH}" ;;
        esac

    elif has_focus_window_getter && has maim; then
        case $1 in
        'full'   ) maim                                  -- "${SCREENSHOT_PATH}" ;;
        'select' ) maim --select                         -- "${SCREENSHOT_PATH}" ;;
        'focused') maim --window "$(get_focused_window)" -- "${SCREENSHOT_PATH}" ;;
        esac

    elif has_focus_window_getter && has escrotum; then
        case $1 in
        'full'   ) escrotum                               -- "${SCREENSHOT_PATH}" ;;
        'select' ) escrotum --select                      -- "${SCREENSHOT_PATH}" ;;
        'focused') escrotum --xid "$(get_focused_window)" -- "${SCREENSHOT_PATH}" ;;
        esac

    elif has_focus_window_getter && has_selection_getter && has mss; then
        selection=$(
            if has hacksaw; then
                hacksaw  -f "%x,%y,%w,%h"
            elif has xrectsel; then
                xrectsel -f "%x,%y,%w,%h"
            else
                slop     -f "%x,%y,%w,%h"
            fi
        )
        case $1 in
        'full'   ) mss                                       --output "${SCREENSHOT_PATH}" ;;
        'select' ) mss --coordinates "${selection}"          --output "${SCREENSHOT_PATH}" ;;
        'focused') mss --coordinates "$(get_focused_window)" --output "${SCREENSHOT_PATH}" ;;
        esac

    elif has scrot; then
        case $1 in
        'full'   ) scrot --multidisp -- "${SCREENSHOT_PATH}" ;;
        'select' ) scrot --select    -- "${SCREENSHOT_PATH}" ;;
        'focused') scrot --focused   -- "${SCREENSHOT_PATH}" ;;
        esac

    elif has_focus_window_getter && has gm; then
        case $1 in
        'full'   ) gm import -window root                    "${SCREENSHOT_PATH}" ;;
        'select' ) gm import                                 "${SCREENSHOT_PATH}" ;;
        'focused') gm import -window "$(get_focused_window)" "${SCREENSHOT_PATH}" ;;
        esac

    elif has_focus_window_getter && has import; then
        case $1 in
        'full'   ) import -window root                    -- "${SCREENSHOT_PATH}" ;;
        'select' ) import                                 -- "${SCREENSHOT_PATH}" ;;
        'focused') import -window "$(get_focused_window)" -- "${SCREENSHOT_PATH}" ;;
        esac

    else
        # current xwd lacks -rect option on ubuntu: can't test
        # imlib2_grab can only make a fullscreen shot
        printf "No graphics/image-magick's import or scrot or escrotum or maim or shotgun or menyoki installed\n" >&2
        exit 1

    fi
}


copy_to_clipboard() {
    if has xclip; then
        printf %s "${SCREENSHOT_PATH}" | xclip -in -selection primary
        xclip -selection clipboard -target image/png <"${SCREENSHOT_PATH}"

    elif has xsel; then
        printf %s "${SCREENSHOT_PATH}" | xsel --input --primary
        printf %s "${SCREENSHOT_PATH}" | xsel --input --clipboard
    fi
}


# https://wiki.archlinux.org/title/List_of_applications/Multimedia#Console
optimize_image() {
    if [ -n "${SCREENSHOT_DOCKER_HOST:-}" ] && docker info >/dev/null 2>&1; then
        (
            export DOCKER_HOST=${SCREENSHOT_DOCKER_HOST}
            # Create a container that would auto-destroy in 10 minutes
            container_id=$(
                docker run --rm -d \
                    skhaz/compression-tools \
                    sleep $(( 60 * 10 ))
            )
            # Destroy container on exit from brackets
            trap 'docker rm -f "${container_id}" >/dev/null; trap - EXIT; exit' EXIT INT HUP
            # Copy file to container, process it, and copy back
            docker cp "${SCREENSHOT_PATH}" "${container_id}:/${SCREENSHOT_NAME}"
            docker exec -ti "${container_id}" ect -9 "/${SCREENSHOT_NAME}"
            docker container cp "${container_id}:/${SCREENSHOT_NAME}" "${SCREENSHOT_PATH}"

            was_optimized
        )

    elif has oxipng; then
        oxipng --quiet --opt max --threads 1 -- "${SCREENSHOT_PATH}"
        was_optimized

    elif has etc; then
        ect -9 "${SCREENSHOT_PATH}"
        was_optimized

    elif has leanify; then
        leanify --iteration 100 -- "${SCREENSHOT_PATH}"
        was_optimized

    elif has pngout; then
        pngout "${SCREENSHOT_PATH}" "/tmp/${SCREENSHOT_NAME}" || [ $? = 2 ]
        mv "/tmp/${SCREENSHOT_NAME}" "${SCREENSHOT_PATH}"
        was_optimized

    elif has optipng; then
        optipng -o7 -strip all -- "${SCREENSHOT_PATH}"
        was_optimized

    elif has pngcrush; then
        pngcrush -brute -reduce "${SCREENSHOT_PATH}" "/tmp/${SCREENSHOT_NAME}"
        if [ "$(get_size "/tmp/${SCREENSHOT_NAME}")" -lt "$(get_size "${SCREENSHOT_PATH}")" ]; then
            mv "/tmp/${SCREENSHOT_NAME}" "${SCREENSHOT_PATH}"
        fi
        was_optimized

    elif has advpng; then
        advpng --recompress --shrink-insane --iter=100 -- "${SCREENSHOT_PATH}"
        was_optimized

    fi
}


ocr_image() {
    if has tesseract; then
        tesseract \
            -l "${SCREENSHOT_OCR_LANGS}" \
            --psm 1 \
            "${SCREENSHOT_PATH}" \
            "${SCREENSHOT_DIR}/${save_date}"
    elif has easyocr; then
        easyocr \
            --lang $(printf %s "${SCREENSHOT_OCR_LANGS}" |sed -e 's/[a-z]+/ /g' -e 's/[a-z]$//g') \
            --detail 0 --file "${SCREENSHOT_PATH}" > "${SCREENSHOT_DIR}/${save_date}.txt"
    fi
}


main() {
    check_user_input "$@"
    mkdir -p "${SCREENSHOT_DIR}"
    make_screenshot "$@"
    printf '%s\n' "${SCREENSHOT_PATH}"
    copy_to_clipboard
    (
        # Execute under lock
        # if flock is available
        if has flock; then
            flock 9
        fi
        optimize_image >&2
        ocr_image >&2
    ) 9>"/var/lock/screenshot-$(id -u).lock"
}

main "$@"
